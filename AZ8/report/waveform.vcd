$date
	Wed May  5 19:24:24 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module pipe $end
$var wire 1 ! clk $end
$var wire 1 " rstn $end
$var wire 32 # wb_data_out [31:0] $end
$var wire 1 $ w_en $end
$var wire 5 % w_addr [4:0] $end
$var wire 32 & res [31:0] $end
$var wire 1 ' r_en $end
$var wire 5 ( r_addr2 [4:0] $end
$var wire 5 ) r_addr1 [4:0] $end
$var wire 17 * inst [16:0] $end
$var wire 5 + id_dest_addr [4:0] $end
$var wire 32 , data_out2 [31:0] $end
$var wire 32 - data_out1 [31:0] $end
$var wire 2 . alu_sig [1:0] $end
$var reg 2 / alu_sig_buff [1:0] $end
$var reg 32 0 alu_wb_buff_res [31:0] $end
$var reg 5 1 dst_addr [4:0] $end
$var reg 5 2 dst_addr_buff [4:0] $end
$var reg 2 3 id_alu_sig [1:0] $end
$var reg 5 4 id_mem_r_addr1 [4:0] $end
$var reg 5 5 id_mem_r_addr2 [4:0] $end
$var reg 1 6 id_mem_r_en $end
$var reg 17 7 if_id_buff_inst [16:0] $end
$var reg 32 8 mem_alu_data_out1 [31:0] $end
$var reg 32 9 mem_alu_data_out2 [31:0] $end
$var reg 32 : wb_mem_data_out [31:0] $end
$var reg 5 ; wb_mem_w_addr [4:0] $end
$var reg 1 < wb_mem_w_en $end
$scope module alu $end
$var wire 32 = a [31:0] $end
$var wire 32 > b [31:0] $end
$var wire 1 ! clk $end
$var wire 2 ? control_sig [1:0] $end
$var wire 1 @ rstn $end
$var wire 32 A res_mul [31:0] $end
$var wire 32 B res_as [31:0] $end
$var wire 32 C res [31:0] $end
$var wire 1 D opp $end
$var wire 1 E asn $end
$scope module asc $end
$var wire 32 F a [31:0] $end
$var wire 1 E asn $end
$var wire 32 G b [31:0] $end
$var wire 17 H rr [16:0] $end
$var wire 32 I res [31:0] $end
$var wire 16 J rb [15:0] $end
$var wire 16 K ra [15:0] $end
$var wire 17 L ir [16:0] $end
$var wire 16 M ib [15:0] $end
$var wire 16 N ia [15:0] $end
$upscope $end
$scope module mulc $end
$var wire 32 O a [31:0] $end
$var wire 32 P b [31:0] $end
$var wire 17 Q rr [16:0] $end
$var wire 32 R res [31:0] $end
$var wire 16 S rb [15:0] $end
$var wire 16 T ra [15:0] $end
$var wire 17 U ir [16:0] $end
$var wire 16 V ib [15:0] $end
$var wire 16 W ia [15:0] $end
$upscope $end
$upscope $end
$scope module idm $end
$var wire 1 ! clk $end
$var wire 17 X inst [16:0] $end
$var wire 1 ' mem_read $end
$var wire 1 " rstn $end
$var wire 5 Y oper2 [4:0] $end
$var wire 5 Z oper1 [4:0] $end
$var wire 5 [ dest [4:0] $end
$var wire 2 \ alu_sig [1:0] $end
$upscope $end
$scope module ifm $end
$var wire 1 ! clk $end
$var wire 1 " rstn $end
$var reg 17 ] inst [16:0] $end
$var reg 4 ^ pc [3:0] $end
$upscope $end
$scope module memory $end
$var wire 1 ! clk $end
$var wire 5 _ r_addr1 [4:0] $end
$var wire 5 ` r_addr2 [4:0] $end
$var wire 1 6 r_en $end
$var wire 1 $ w_en $end
$var wire 5 a w_addr [4:0] $end
$var wire 32 b data_in [31:0] $end
$var reg 32 c data_out1 [31:0] $end
$var reg 32 d data_out2 [31:0] $end
$upscope $end
$scope module wbm $end
$var wire 1 ! clk $end
$var wire 32 e data_i [31:0] $end
$var wire 32 f data_o [31:0] $end
$var wire 5 g dst_addr_i [4:0] $end
$var wire 5 h dst_addr_o [4:0] $end
$var wire 1 $ w_en $end
$var reg 32 i data_out [31:0] $end
$var reg 5 j dst_addr_out [4:0] $end
$var reg 1 k memory_write_mod $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
b0 ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
xE
xD
bx C
bx B
bx A
x@
bx ?
bx >
bx =
x<
bx ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
0'
bx &
bx %
1$
bx #
0"
0!
$end
#5
0$
0k
1<
16
1'
1!
#10
1$
1k
0'
0!
1"
#15
b1 ^
b1000010000100001 *
b1000010000100001 ]
0$
0k
1'
1!
#20
1$
1k
0'
0!
#25
b1 .
b1 \
b1 )
b1 Z
b1 (
b1 Y
b1 +
b1 [
b10 ^
b0 *
b0 ]
0$
0k
b1000010000100001 7
b1000010000100001 X
1'
1!
#30
1$
1k
0'
0!
#35
b100000000000000010 ,
b100000000000000010 d
b100000000000000010 -
b100000000000000010 c
b0 .
b0 \
b0 )
b0 Z
b0 (
b0 Y
b0 +
b0 [
b11 ^
0$
0k
b1 /
b1 5
b1 `
b1 4
b1 _
b0 7
b0 X
b1 2
1'
1!
#40
1$
1k
0'
0!
#45
b1000000000000000100 #
b1000000000000000100 b
b1000000000000000100 f
b1000000000000000100 i
b11110000000000001111 ,
b11110000000000001111 d
b11110000000000001111 -
b11110000000000001111 c
b1 %
b1 a
b1 h
b1 j
b1000000000000000100 &
b1000000000000000100 C
b1000000000000000100 e
b1000000000000000100 A
b1000000000000000100 I
b1000 B
b1000 R
b100 H
b100 L
0@
b10 J
b10 M
b0 Q
b1000 U
b10 S
b10 V
b10 K
b10 N
b10 T
b10 W
1E
0D
b100 ^
0$
0k
b100000000000000010 9
b100000000000000010 >
b100000000000000010 G
b100000000000000010 P
b100000000000000010 8
b100000000000000010 =
b100000000000000010 F
b100000000000000010 O
b1 3
b1 ?
b0 /
b0 5
b0 `
b0 4
b0 _
b1 1
b1 g
b0 2
1'
1!
#50
1$
1k
0'
0!
#55
b0 #
b0 b
b0 f
b0 i
b0 %
b0 a
b0 h
b0 j
b0 &
b0 C
b0 e
b0 A
b0 I
b111000010 B
b111000010 R
b0 H
b0 L
b1111 J
b1111 M
b1111 S
b1111 V
b1111 K
b1111 N
b1111 T
b0 Q
b111000010 U
b1111 W
0E
b101 ^
0$
0k
b1000000000000000100 :
b1 ;
b1000000000000000100 0
b11110000000000001111 9
b11110000000000001111 >
b11110000000000001111 G
b11110000000000001111 P
b11110000000000001111 8
b11110000000000001111 =
b11110000000000001111 F
b11110000000000001111 O
b0 3
b0 ?
b0 1
b0 g
1'
1!
#60
b0 ,
b0 d
b0 -
b0 c
1$
1k
0'
0!
#65
b0 B
b0 R
b0 J
b0 M
b0 S
b0 V
b0 K
b0 N
b0 T
b0 Q
b0 U
b0 W
0$
0k
b0 :
b0 ;
b0 0
b0 9
b0 >
b0 G
b0 P
b0 8
b0 =
b0 F
b0 O
1'
1!
#70
1$
1k
0'
0!
#75
0$
0k
1'
1!
#80
1$
1k
0'
0!
#85
0$
0k
1'
1!
#90
1$
1k
0'
0!
#95
0$
0k
1'
1!
#100
1$
1k
0'
0!
#105
0$
0k
1'
1!
#110
1$
1k
0'
0!
