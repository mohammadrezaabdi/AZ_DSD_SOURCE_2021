$date
	Wed May  5 19:53:39 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module pipe $end
$var wire 1 ! clk $end
$var wire 1 " rstn $end
$var wire 32 # wb_data_out [31:0] $end
$var wire 1 $ w_en $end
$var wire 5 % w_addr [4:0] $end
$var wire 32 & res [31:0] $end
$var wire 1 ' r_en $end
$var wire 5 ( r_addr2 [4:0] $end
$var wire 5 ) r_addr1 [4:0] $end
$var wire 17 * inst [16:0] $end
$var wire 5 + id_dest_addr [4:0] $end
$var wire 32 , data_out2 [31:0] $end
$var wire 32 - data_out1 [31:0] $end
$var wire 2 . alu_sig [1:0] $end
$var reg 2 / alu_sig_buff [1:0] $end
$var reg 5 0 dst_addr [4:0] $end
$var reg 5 1 dst_addr_buff [4:0] $end
$var reg 2 2 id_alu_sig [1:0] $end
$var reg 5 3 id_mem_r_addr1 [4:0] $end
$var reg 5 4 id_mem_r_addr2 [4:0] $end
$var reg 1 5 id_mem_r_en $end
$var reg 17 6 if_id_buff_inst [16:0] $end
$var reg 32 7 mem_alu_data_out1 [31:0] $end
$var reg 32 8 mem_alu_data_out2 [31:0] $end
$scope module alu $end
$var wire 32 9 a [31:0] $end
$var wire 32 : b [31:0] $end
$var wire 1 ! clk $end
$var wire 2 ; control_sig [1:0] $end
$var wire 32 < res_mul [31:0] $end
$var wire 32 = res_as [31:0] $end
$var wire 32 > res [31:0] $end
$var wire 1 ? opp $end
$var wire 1 @ asn $end
$scope module asc $end
$var wire 32 A a [31:0] $end
$var wire 1 @ asn $end
$var wire 32 B b [31:0] $end
$var wire 17 C rr [16:0] $end
$var wire 32 D res [31:0] $end
$var wire 16 E rb [15:0] $end
$var wire 16 F ra [15:0] $end
$var wire 17 G ir [16:0] $end
$var wire 16 H ib [15:0] $end
$var wire 16 I ia [15:0] $end
$upscope $end
$scope module mulc $end
$var wire 32 J a [31:0] $end
$var wire 32 K b [31:0] $end
$var wire 17 L rr [16:0] $end
$var wire 32 M res [31:0] $end
$var wire 16 N rb [15:0] $end
$var wire 16 O ra [15:0] $end
$var wire 17 P ir [16:0] $end
$var wire 16 Q ib [15:0] $end
$var wire 16 R ia [15:0] $end
$upscope $end
$upscope $end
$scope module idm $end
$var wire 1 ! clk $end
$var wire 17 S inst [16:0] $end
$var wire 1 ' mem_read $end
$var wire 1 " rstn $end
$var wire 5 T oper2 [4:0] $end
$var wire 5 U oper1 [4:0] $end
$var wire 5 V dest [4:0] $end
$var wire 2 W alu_sig [1:0] $end
$upscope $end
$scope module ifm $end
$var wire 1 ! clk $end
$var wire 1 " rstn $end
$var reg 17 X inst [16:0] $end
$var reg 4 Y pc [3:0] $end
$upscope $end
$scope module memory $end
$var wire 1 ! clk $end
$var wire 5 Z r_addr1 [4:0] $end
$var wire 5 [ r_addr2 [4:0] $end
$var wire 1 5 r_en $end
$var wire 1 $ w_en $end
$var wire 5 \ w_addr [4:0] $end
$var wire 32 ] data_in [31:0] $end
$var reg 32 ^ data_out1 [31:0] $end
$var reg 32 _ data_out2 [31:0] $end
$upscope $end
$scope module wbm $end
$var wire 1 ! clk $end
$var wire 32 ` data_i [31:0] $end
$var wire 32 a data_o [31:0] $end
$var wire 5 b dst_addr_i [4:0] $end
$var wire 5 c dst_addr_o [4:0] $end
$var wire 1 $ w_en $end
$var reg 32 d data_out [31:0] $end
$var reg 5 e dst_addr_out [4:0] $end
$var reg 1 f memory_write_mod $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
b0 Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
0'
bx &
bx %
1$
bx #
0"
0!
$end
#5
0$
0f
15
1'
1!
#10
1$
1f
0'
0!
1"
#15
b1 Y
b11000110001100011 *
b11000110001100011 X
0$
0f
1'
1!
#20
1$
1f
0'
0!
#25
b11 .
b11 W
b11 )
b11 U
b11 (
b11 T
b11 +
b11 V
b10 Y
b1000100001000010 *
b1000100001000010 X
0$
0f
b11000110001100011 6
b11000110001100011 S
1'
1!
#30
1$
1f
0'
0!
#35
b10000000000000001 ,
b10000000000000001 _
b10000000000000001 -
b10000000000000001 ^
b1 .
b1 W
b10 )
b10 U
b10 (
b10 T
b10 +
b10 V
b11 Y
b0 *
b0 X
0$
0f
b11 /
b11 4
b11 [
b11 3
b11 Z
b1000100001000010 6
b1000100001000010 S
b11 1
1'
1!
#40
1$
1f
0'
0!
#45
b100000000000000010 #
b100000000000000010 ]
b100000000000000010 a
b100000000000000010 d
b100000000000000010 ,
b100000000000000010 _
b100000000000000010 -
b100000000000000010 ^
b11 %
b11 \
b11 c
b11 e
b100000000000000010 &
b100000000000000010 >
b100000000000000010 `
b100000000000000010 <
b100000000000000010 D
b10 =
b10 M
b10 C
b10 G
b1 E
b1 H
b0 L
b10 P
b1 N
b1 Q
b1 F
b1 I
b1 O
b1 R
1@
1?
b0 .
b0 W
b0 )
b0 U
b0 (
b0 T
b0 +
b0 V
b100 Y
0$
0f
b10000000000000001 8
b10000000000000001 :
b10000000000000001 B
b10000000000000001 K
b10000000000000001 7
b10000000000000001 9
b10000000000000001 A
b10000000000000001 J
b11 2
b11 ;
b1 /
b10 4
b10 [
b10 3
b10 Z
b0 6
b0 S
b11 0
b11 b
b10 1
1'
1!
#50
1$
1f
0'
0!
#55
b1000 #
b1000 ]
b1000 a
b1000 d
b0 ,
b0 _
b0 -
b0 ^
b10 %
b10 \
b10 c
b10 e
b1000000000000000100 <
b1000000000000000100 D
b100 C
b100 G
b1000 =
b1000 M
b1000 &
b1000 >
b1000 `
b10 E
b10 H
b10 N
b10 Q
b10 F
b10 I
b10 O
b0 L
b1000 P
b10 R
0?
b101 Y
b10000110000100111 *
b10000110000100111 X
0$
0f
b100000000000000010 8
b100000000000000010 :
b100000000000000010 B
b100000000000000010 K
b100000000000000010 7
b100000000000000010 9
b100000000000000010 A
b100000000000000010 J
b1 2
b1 ;
b0 /
b0 4
b0 [
b0 3
b0 Z
b10 0
b10 b
b0 1
1'
1!
#60
1$
1f
0'
0!
#65
b0 #
b0 ]
b0 a
b0 d
b0 %
b0 \
b0 c
b0 e
b0 &
b0 >
b0 `
b0 <
b0 D
b0 =
b0 M
b0 C
b0 G
b0 E
b0 H
b0 N
b0 Q
b0 F
b0 I
b0 O
b0 L
b0 P
b0 R
0@
b10 .
b10 W
b11 )
b11 U
b1 (
b1 T
b111 +
b111 V
0$
0f
b0 8
b0 :
b0 B
b0 K
b0 7
b0 9
b0 A
b0 J
b0 2
b0 ;
b10000110000100111 6
b10000110000100111 S
b0 0
b0 b
1'
1!
#70
1$
1f
0'
0!
#75
b10000000000000001 ,
b10000000000000001 _
b100000000000000010 -
b100000000000000010 ^
0$
0f
b10 /
b1 4
b1 [
b11 3
b11 Z
b111 1
1'
1!
#80
1$
1f
0'
0!
#85
b10000000000000001 #
b10000000000000001 ]
b10000000000000001 a
b10000000000000001 d
b111 %
b111 \
b111 c
b111 e
b10000000000000001 &
b10000000000000001 >
b10000000000000001 `
b10000000000000001 <
b10000000000000001 D
b100 =
b100 M
b1 C
b1 G
b1 E
b1 H
b1 N
b0 L
b100 P
b1 Q
b10 F
b10 I
b10 O
b10 R
1?
0$
0f
b10000000000000001 8
b10000000000000001 :
b10000000000000001 B
b10000000000000001 K
b100000000000000010 7
b100000000000000010 9
b100000000000000010 A
b100000000000000010 J
b10 2
b10 ;
b111 0
b111 b
1'
1!
#90
1$
1f
0'
0!
#95
0$
0f
1'
1!
#100
1$
1f
0'
0!
#105
0$
0f
1'
1!
#110
1$
1f
0'
0!
